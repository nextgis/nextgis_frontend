{"version":3,"sources":["webpack://MapboxglMapAdapter/webpack/universalModuleDefinition","webpack://MapboxglMapAdapter/webpack/bootstrap","webpack://MapboxglMapAdapter/external \"mapbox-gl\"","webpack://MapboxglMapAdapter/external \"events\"","webpack://MapboxglMapAdapter/./src/layer-adapters/BaseAdapter.ts","webpack://MapboxglMapAdapter/./src/layer-adapters/MvtAdapter.ts","webpack://MapboxglMapAdapter/./src/layer-adapters/TileAdapter.ts","webpack://MapboxglMapAdapter/./src/layer-adapters/OsmAdapter.ts","webpack://MapboxglMapAdapter/./src/controls/ZoomControl.ts","webpack://MapboxglMapAdapter/./src/controls/CompassControl.ts","webpack://MapboxglMapAdapter/./src/controls/AttributionControl.ts","webpack://MapboxglMapAdapter/./src/mapboxgl-map-adapter.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ID","BaseAdapter","map","options","this","id","String","assign","addLayer","MvtAdapter","_super","__extends","idString","layerOptions","type","source-layer","source","tiles","url","layout","visibility","paint","before","TileAdapter_ID","TileAdapter","TileAdapter_extends","opt","__assign","subdomains","split","x","replace","tileSize","OPTIONS","attribution","OsmAdapter","OsmAdapter_extends","ZoomControl","showCompass","ZoomControl_extends","external_mapbox_gl_","CompassControl","showZoom","CompassControl_extends","AttributionControl","AttributionControl_extends","mapboxgl_map_adapter_MapboxglMapAdapter","MapboxglMapAdapter","displayProjection","lonlatProjection","emitter","external_events_","layerAdapters","_layers","_baseLayers","DPI","IPM","isLoaded","orders","_sourcedataloading","container","target","center","zoom","style","version","sources","layers","_addEventsListeners","getContainer","setCenter","latLng","setZoom","fit","e","fitBounds","linear","setRotation","angle","showLayer","layerName","_this","onMapLoad","toggleLayer","hideLayer","adapterDef","baselayer","adapterEngine","getLayerAdapter","adapter_1","length","addlayerFun","toResolve_1","layerId","push","moveLayer","then","layer","Promise","resolve","removeLayer","removeSource","getLayer","undefined","isLayerOnTheMap","getLayers","keys","setLayerOpacity","opacity","setPaintProperty","getScaleForResolution","res","mpu","parseFloat","getResolutionForScale","scale","cb","once","status","exist","setLayoutProperty","addControl","controlDef","position","control","engine","controlAdapters","onMapClick","evt","lngLat","_a","point","y","emit","pixel","top","left","on","data","sourceId","tile","dataType","emit_1","isSourceLoaded","forEach","index","indexOf","splice","TILE","MVT","OSM","ZOOM","COMPASS","ATTRIBUTION","__webpack_exports__"],"mappings":"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","file":"mapboxgl-map-adapter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"mapbox-gl\"), require(\"events\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"mapbox-gl\", \"events\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MapboxglMapAdapter\"] = factory(require(\"mapbox-gl\"), require(\"events\"));\n\telse\n\t\troot[\"MapboxglMapAdapter\"] = factory(root[\"mapbox-gl\"], root[\"events\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { LayerAdapter } from '@nextgis/webmap';\nimport {Map} from 'mapbox-gl';\n\nlet ID = 1;\n\nexport abstract class BaseAdapter implements LayerAdapter {\n\n  map: Map;\n  name: string;\n  options;\n\n  constructor(map, options?) {\n    this.map = map;\n    this.name = options.id || String(ID++);\n    this.options = Object.assign({}, this.options, options);\n  }\n\n  addLayer(options?): string {\n    return '';\n  }\n}\n","import { LayerAdapter } from '@nextgis/webmap';\nimport { BaseAdapter } from './BaseAdapter';\nimport { Layer } from 'mapbox-gl';\n\nexport class MvtAdapter extends BaseAdapter implements LayerAdapter {\n\n  addLayer(options?): string {\n    options = Object.assign({}, this.options, options || {});\n    // read about https://blog.mapbox.com/vector-tile-specification-version-2-whats-changed-259d4cd73df6\n    const idString = String(this.name);\n\n    const layerOptions: Layer = {\n      'id': idString,\n      'type': options.type || 'fill',\n      'source-layer': options['source-layer'] || idString,\n      'source': {\n        type: 'vector',\n        tiles: [options.url],\n      },\n      'layout': {\n        visibility: 'none',\n      },\n    };\n\n    if (options.paint) {\n      layerOptions.paint = options.paint;\n    }\n\n    this.map.addLayer(layerOptions, options.before);\n    return this.name;\n  }\n}\n","import { LayerAdapter } from '@nextgis/webmap';\r\nimport { BaseAdapter } from './BaseAdapter';\r\n\r\nlet ID = 1;\r\n\r\nexport class TileAdapter extends BaseAdapter implements LayerAdapter {\r\n\r\n  addLayer(options?): string {\r\n    this.name = options.id || 'tile-' + ID++;\r\n    const opt = {...this.options, ...(options || {})};\r\n\r\n    let tiles;\r\n    if (opt && opt.subdomains) {\r\n      tiles = opt.subdomains.split('').map((x) => {\r\n        const subUrl = opt.url.replace('{s}', x);\r\n        return subUrl;\r\n      },\r\n    );\r\n    } else {\r\n      tiles = [opt.url];\r\n    }\r\n\r\n    this.map.addLayer({\r\n      id: String(this.name),\r\n      type: 'raster',\r\n      layout: {\r\n        visibility: 'none',\r\n      },\r\n      source: {\r\n        type: 'raster',\r\n        // point to our third-party tiles. Note that some examples\r\n        // show a \"url\" property. This only applies to tilesets with\r\n        // corresponding TileJSON (such as mapbox tiles).\r\n        tiles,\r\n        tileSize: opt && opt.tileSize || 1024,\r\n      },\r\n    }, options.before);\r\n    return this.name;\r\n  }\r\n}\r\n","import { LayerAdapter } from '@nextgis/webmap';\nimport { TileAdapter } from './TileAdapter';\n\nconst OPTIONS = {\n  url: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n  attribution: '&copy; <a href=\"http://osm.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors',\n  subdomains: 'abc',\n};\n\nexport class OsmAdapter extends TileAdapter implements LayerAdapter {\n\n  addLayer(options?): string {\n    return super.addLayer(Object.assign({}, OPTIONS, options));\n  }\n}\n","import { NavigationControl } from 'mapbox-gl';\r\n\r\nexport class ZoomControl extends NavigationControl {\r\n  constructor(options = {}) {\r\n    options = Object.assign({}, options, { showCompass: false });\r\n    super(options);\r\n  }\r\n}\r\n","import { NavigationControl } from 'mapbox-gl';\r\n\r\nexport class CompassControl extends NavigationControl {\r\n    constructor(options = {}) {\r\n        options = Object.assign({}, options, {showZoom: false});\r\n        super(options);\r\n    }\r\n}\r\n","// import { MapControl } from '@nextgis/webmap';\r\nimport { AttributionControl as AC } from 'mapbox-gl';\r\n\r\nexport class AttributionControl extends AC {\r\n\r\n}\r\n","import { MapAdapter } from '@nextgis/webmap';\r\nimport { MvtAdapter } from './layer-adapters/MvtAdapter';\r\nimport { Map } from 'mapbox-gl';\r\nimport { OsmAdapter } from './layer-adapters/OsmAdapter';\r\nimport { TileAdapter } from './layer-adapters/TileAdapter';\r\nimport { EventEmitter } from 'events';\r\nimport { ZoomControl } from './controls/ZoomControl';\r\nimport { CompassControl } from './controls/CompassControl';\r\nimport { AttributionControl } from './controls/AttributionControl';\r\n\r\ntype positions = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\r\n\r\nexport default class MapboxglMapAdapter implements MapAdapter {\r\n\r\n  static layerAdapters = {\r\n    TILE: TileAdapter,\r\n    // IMAGE: ImageAdapter,\r\n    MVT: MvtAdapter,\r\n    OSM: OsmAdapter,\r\n  };\r\n\r\n  static controlAdapters = {\r\n    ZOOM: ZoomControl,\r\n    COMPASS: CompassControl,\r\n    ATTRIBUTION: AttributionControl,\r\n  };\r\n\r\n  options: any;\r\n\r\n  displayProjection = 'EPSG:3857';\r\n  lonlatProjection = 'EPSG:4326';\r\n\r\n  map: Map;\r\n\r\n  emitter = new EventEmitter();\r\n\r\n  layerAdapters = MapboxglMapAdapter.layerAdapters;\r\n\r\n  _layers = {};\r\n\r\n  private _baseLayers: string[] = [];\r\n\r\n  private DPI = 1000 / 39.37 / 0.28;\r\n  private IPM = 39.37;\r\n  private isLoaded = false;\r\n  private orders: string[] = [];\r\n  private _sourcedataloading: { [name: string]: any[] } = {};\r\n\r\n  // create(options: MapOptions = {target: 'map'}) {\r\n  create(options) {\r\n    if (!this.map) {\r\n      this.options = options;\r\n      this.map = new Map({\r\n        container: options.target,\r\n        center: [96, 63], // initial map center in [lon, lat]\r\n        zoom: 2,\r\n        style: {\r\n          version: 8,\r\n          name: 'Empty style',\r\n          sources: {},\r\n          layers: [],\r\n        },\r\n      });\r\n      this._addEventsListeners();\r\n    }\r\n  }\r\n\r\n  getContainer() {\r\n    return this.map.getContainer();\r\n  }\r\n\r\n  setCenter(latLng: [number, number]) {\r\n    // ignore\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    // ignore\r\n  }\r\n\r\n  // [extent_left, extent_bottom, extent_right, extent_top];\r\n  fit(e: [number, number, number, number]) {\r\n    // top, left, bottom, right\r\n    this.map.fitBounds([[e[0], e[1]], [e[2], e[3]]], {linear: true});\r\n  }\r\n\r\n  setRotation(angle: number) {\r\n    // ignore\r\n  }\r\n\r\n  showLayer(layerName: string) {\r\n    this.onMapLoad(() => this.toggleLayer(layerName, true));\r\n  }\r\n\r\n  hideLayer(layerName: string) {\r\n    this.onMapLoad(() => this.toggleLayer(layerName, false));\r\n  }\r\n\r\n  addLayer(adapterDef, options?, baselayer?: boolean) {\r\n    return this.onMapLoad(() => {\r\n      let adapterEngine;\r\n      if (typeof adapterDef === 'string') {\r\n        adapterEngine = this.getLayerAdapter(adapterDef);\r\n      }\r\n      if (adapterEngine) {\r\n        const adapter = new adapterEngine(this.map, options) as any;\r\n        if (baselayer && this.orders.length) {\r\n          options.before = this.orders[0];\r\n        }\r\n        const addlayerFun = adapter.addLayer(options);\r\n        const toResolve = () => {\r\n          const layerId = adapter.name;\r\n          this._layers[layerId] = false;\r\n          this.orders.push(layerId);\r\n          this._baseLayers.push(layerId);\r\n          if (!baselayer) {\r\n            this.map.moveLayer(layerId);\r\n          } else {\r\n            this.map.moveLayer(layerId, this.orders[0]);\r\n          }\r\n          return adapter;\r\n        };\r\n        return addlayerFun.then ? addlayerFun.then((layer) => toResolve()) : Promise.resolve(toResolve());\r\n      }\r\n    });\r\n  }\r\n\r\n  removeLayer(layerId: string) {\r\n    if (this._layers[layerId]) {\r\n      this.map.removeLayer(layerId);\r\n      this.map.removeSource(layerId);\r\n      delete this._layers[layerId];\r\n    }\r\n    // this._toggleLayer(false, layerName);\r\n  }\r\n\r\n  // TODO: rename hasLayer; move to WebMap\r\n  getLayer(layerName: string) {\r\n    return this._layers[layerName] !== undefined;\r\n  }\r\n\r\n  // TODO: move to WebMap\r\n  isLayerOnTheMap(layerName: string): boolean {\r\n    return this._layers[layerName];\r\n  }\r\n  // TODO: move to WebMap\r\n  getLayers(): string[] {\r\n    return Object.keys(this._layers);\r\n  }\r\n\r\n  setLayerOpacity(layerName: string, opacity: number) {\r\n    this.onMapLoad().then(() => {\r\n      const layer = this.map.getLayer(layerName);\r\n      if (layer) {\r\n        this.map.setPaintProperty(layerName, layer.type + '-opacity', opacity);\r\n      }\r\n    });\r\n  }\r\n\r\n  getScaleForResolution(res, mpu) {\r\n    return parseFloat(res) * (mpu * this.IPM * this.DPI);\r\n  }\r\n\r\n  getResolutionForScale(scale, mpu) {\r\n    return parseFloat(scale) / (mpu * this.IPM * this.DPI);\r\n  }\r\n\r\n  onMapLoad<K = any>(cb?): Promise<K> {\r\n    return new Promise<K>((resolve) => {\r\n      if (this.isLoaded) { // map.loaded()\r\n        resolve(cb && cb());\r\n      } else {\r\n        this.map.once('load', () => {\r\n          this.isLoaded = true;\r\n          resolve(cb && cb());\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleLayer(layerId, status) {\r\n    this.onMapLoad().then(() => {\r\n      const exist = this._layers[layerId];\r\n\r\n      if (exist !== undefined && exist !== status) {\r\n        this.map.setLayoutProperty(layerId, 'visibility', status ? 'visible' : 'none');\r\n        this._layers[layerId] = status;\r\n      }\r\n    });\r\n  }\r\n\r\n  addControl(controlDef, position: positions, options) {\r\n    let control;\r\n    if (typeof controlDef === 'string') {\r\n      const engine = MapboxglMapAdapter.controlAdapters[controlDef];\r\n      if (engine) {\r\n        control = new engine(options);\r\n      }\r\n    } else {\r\n      control = controlDef;\r\n    }\r\n    if (control) {\r\n      this.map.addControl(control, position);\r\n    }\r\n  }\r\n\r\n  onMapClick(evt) {\r\n\r\n    const latLng = evt.lngLat;\r\n    const { x, y } = evt.point;\r\n\r\n    this.emitter.emit('click', { latLng, pixel: { top: y, left: x } });\r\n  }\r\n\r\n  private getLayerAdapter(name: string) {\r\n    return MapboxglMapAdapter.layerAdapters[name];\r\n  }\r\n\r\n  private _addEventsListeners() {\r\n    // write mem for start loaded layers\r\n    this.map.on('sourcedataloading', (data) => {\r\n      this._sourcedataloading[data.sourceId] = this._sourcedataloading[data.sourceId] || [];\r\n      if (data.tile) {\r\n        this._sourcedataloading[data.sourceId].push(data.tile);\r\n      }\r\n    });\r\n    // emmit data-loaded for each layer or all sources is loaded\r\n    this.map.on('sourcedata', (data) => {\r\n      if (data.dataType === 'source') {\r\n        const isLoaded = data.isSourceLoaded;\r\n        const emit = (target) => {\r\n          if (this._layers[target]) {\r\n            this.emitter.emit('data-loaded', { target });\r\n          }\r\n        };\r\n        // if all sources is loaded emmit event for all and clean mem\r\n        if (isLoaded) {\r\n          Object.keys(this._sourcedataloading).forEach((x) => {\r\n            emit(x);\r\n          });\r\n          this._sourcedataloading = {};\r\n        } else {\r\n          // check if all tiles in layer is loaded\r\n          const tiles = this._sourcedataloading[data.sourceId];\r\n          if (tiles && data.tile) {\r\n            const index = tiles.indexOf(data.tile);\r\n            if (index !== -1) {\r\n              this._sourcedataloading[data.sourceId].splice(index, 1);\r\n            }\r\n            // if no more loaded tiles in layer emit event and clean mem only for this layer\r\n            if (!tiles.length) {\r\n              emit(data.sourceId);\r\n              delete this._sourcedataloading[data.sourceId];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.map.on('click', (evt) => {\r\n      this.onMapClick(evt);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}