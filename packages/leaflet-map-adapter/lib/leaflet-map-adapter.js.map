{"version":3,"sources":["webpack://LeafletMapAdapter/webpack/universalModuleDefinition","webpack://LeafletMapAdapter/webpack/bootstrap","webpack://LeafletMapAdapter/external \"leaflet\"","webpack://LeafletMapAdapter/external \"events\"","webpack://LeafletMapAdapter/./src/layer-adapters/wms.js","webpack://LeafletMapAdapter/./src/layer-adapters/BaseAdapter.ts","webpack://LeafletMapAdapter/./src/layer-adapters/TileAdapter.ts","webpack://LeafletMapAdapter/./src/layer-adapters/GeoJsonAdapter.ts","webpack://LeafletMapAdapter/./src/controls/Attribution.ts","webpack://LeafletMapAdapter/./src/layer-adapters/ImageAdapter.ts","webpack://LeafletMapAdapter/./src/leaflet-map-adapter.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","L","wms","keys","obj","result","push","Source","Layer","extend","options","untiled","identify","initialize","url","setOptions","this","tiled","_url","_subLayers","_overlay","createOverlay","overlayOptions","opt","overlay","tileLayer","onAdd","refreshOverlay","getEvents","click","setOpacity","opacity","bringToBack","isBack","bringToFront","getLayer","layer","addSubLayer","removeSubLayer","subLayers","join","_map","setParams","layers","addTo","remove","evt","getIdentifyLayers","length","getFeatureInfo","containerPoint","latlng","showFeatureInfo","point","callback","params","getFeatureInfoParams","Util","getParamString","showWaiting","ajax","hideWaiting","text","parseFeatureInfo","context","request","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","identifyLayers","wmsParams","updateWmsParams","infoParams","query_layers","X","Math","round","x","Y","y","info","openPopup","_container","style","cursor","source","layerName","getSourceForUrl","_source","_name","onRemove","sources","TileLayer","WMS","Overlay","defaultWmsParams","service","version","styles","format","transparent","crs","uppercase","attribution","minZoom","maxZoom","opts","update","getAttribution","map","_currentOverlay","removeLayer","_currentUrl","moveend","getImageUrl","bounds","getBounds","imageOverlay","once","zIndex","setZIndex","getZoom","size","getSize","wmsVersion","parseFloat","projectionKey","nw","project","getNorthWest","se","getSouthEast","width","height","code","bbox","CRS","EPSG4326","pstr","apply","ID","BaseAdapter","id","String","assign","addLayer","TileAdapter_ID","TileAdapter_TileAdapter","_super","TileAdapter","__extends","__rest","external_leaflet_","GeoJsonAdapter_ID","GeoJsonAdapter_GeoJsonAdapter","GeoJsonAdapter","GeoJsonAdapter_extends","data","AttributionControl","_this","customAttribution","concat","forEach","addAttribution","Attribution_extends","Attribution","ImageAdapter_ID","ImageAdapter_ImageAdapter","ImageAdapter","updateWmsParamsFromOpt","__assign","wms_default","a","updateWmsParams_1","leaflet_map_adapter_LeafletMapAdapter","LeafletMapAdapter","target","layerAdapters","displayProjection","lonlatProjection","emitter","external_events_","_layers","DPI","IPM","_order","_length","_baseLayers","zoomControl","attributionControl","emit","_addMapListeners","getContainer","onMapLoad","cb","Promise","resolve","setCenter","latLng","setView","setZoom","zoom","fit","e","fitBounds","getLayerAdapter","getLayers","isLayerOnTheMap","onMap","addControl","controlDef","position","control","engine","controlAdapters","replace","adapterDef","baselayer","adapterEngine","adapter_1","addlayerFun","toResolve_1","layerId","layerOpts","baseLayer","order","then","reject","showLayer","toggleLayer","hideLayer","setLayerOpacity","getScaleForResolution","res","mpu","getResolutionForScale","scale","action","onMapClick","coord","pixel","left","top","on","IMAGE","TILE","GEOJSON","ZOOM","Zoom","ATTRIBUTION","__webpack_exports__"],"mappings":"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","file":"leaflet-map-adapter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"leaflet\"), require(\"events\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"leaflet\", \"events\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LeafletMapAdapter\"] = factory(require(\"leaflet\"), require(\"events\"));\n\telse\n\t\troot[\"LeafletMapAdapter\"] = factory(root[\"leaflet\"], root[\"events\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","/*!\n * leaflet.wms.js\n * A collection of Leaflet utilities for working with Web Mapping services.\n * (c) 2014-2016, Houston Engineering, Inc.\n * MIT License\n */\n\n(function (factory) {\n  // Module systems magic dance, Leaflet edition\n  if (typeof define === 'function' && define.amd) {\n      // AMD\n      define(['leaflet'], factory);\n  } else if (typeof module !== 'undefined') {\n      // Node/CommonJS\n      module.exports = factory(require('leaflet'));\n  } else {\n      // Browser globals\n      if (typeof this.L === 'undefined')\n          throw 'Leaflet must be loaded first!';\n      // Namespace\n      this.L.WMS = this.L.wms = factory(this.L);\n  }\n}(function (L) {\n\n// Module object\nvar wms = {};\n\n// Quick shim for Object.keys()\nif (!('keys' in Object)) {\n  Object.keys = function(obj) {\n      var result = [];\n      for (var i in obj) {\n          if (obj.hasOwnProperty(i)) {\n              result.push(i);\n          }\n      }\n      return result;\n  };\n}\n\n/*\n* wms.Source\n* The Source object manages a single WMS connection.  Multiple \"layers\" can be\n* created with the getLayer function, but a single request will be sent for\n* each image update.  Can be used in non-tiled \"overlay\" mode (default), or\n* tiled mode, via an internal wms.Overlay or wms.TileLayer, respectively.\n*/\nwms.Source = L.Layer.extend({\n  'options': {\n      'untiled': true,\n      'identify': true\n  },\n\n  'initialize': function(url, options) {\n      L.setOptions(this, options);\n      if (this.options.tiled) {\n          this.options.untiled = false;\n      }\n      this._url = url;\n      this._subLayers = {};\n      this._overlay = this.createOverlay(this.options.untiled);\n  },\n\n  'createOverlay': function(untiled) {\n      // Create overlay with all options other than untiled & identify\n      var overlayOptions = {};\n      for (var opt in this.options) {\n          if (opt != 'untiled' && opt != 'identify') {\n              overlayOptions[opt] = this.options[opt];\n          }\n      }\n      if (untiled) {\n          return wms.overlay(this._url, overlayOptions);\n      } else {\n          return wms.tileLayer(this._url, overlayOptions);\n      }\n  },\n\n  'onAdd': function() {\n      this.refreshOverlay();\n  },\n\n  'getEvents': function() {\n      if (this.options.identify) {\n          return {'click': this.identify};\n      } else {\n          return {};\n      }\n  },\n\n  'setOpacity': function(opacity) {\n       this.options.opacity = opacity;\n       if (this._overlay) {\n           this._overlay.setOpacity(opacity);\n       }\n  },\n\n  'bringToBack': function() {\n       this.options.isBack = true;\n       if (this._overlay) {\n           this._overlay.bringToBack();\n       }\n  },\n\n  'bringToFront': function() {\n       this.options.isBack = false;\n       if (this._overlay) {\n           this._overlay.bringToFront();\n       }\n  },\n\n  'getLayer': function(name) {\n      return wms.layer(this, name);\n  },\n\n  'addSubLayer': function(name) {\n      this._subLayers[name] = true;\n      this.refreshOverlay();\n  },\n\n  'removeSubLayer': function(name) {\n      delete this._subLayers[name];\n      this.refreshOverlay();\n  },\n\n  'refreshOverlay': function() {\n      var subLayers = Object.keys(this._subLayers).join(\",\");\n      if (!this._map) {\n          return;\n      }\n      if (!subLayers) {\n          this._overlay.remove();\n      } else {\n          this._overlay.setParams({'layers': subLayers});\n          this._overlay.addTo(this._map);\n      }\n  },\n\n  'identify': function(evt) {\n      // Identify map features in response to map clicks. To customize this\n      // behavior, create a class extending wms.Source and override one or\n      // more of the following hook functions.\n\n      var layers = this.getIdentifyLayers();\n      if (!layers.length) {\n          return;\n      }\n      this.getFeatureInfo(\n          evt.containerPoint, evt.latlng, layers,\n          this.showFeatureInfo\n      );\n  },\n\n  'getFeatureInfo': function(point, latlng, layers, callback) {\n      // Request WMS GetFeatureInfo and call callback with results\n      // (split from identify() to faciliate use outside of map events)\n      var params = this.getFeatureInfoParams(point, layers),\n          url = this._url + L.Util.getParamString(params, this._url);\n\n      this.showWaiting();\n      this.ajax(url, done);\n\n      function done(result) {\n          this.hideWaiting();\n          var text = this.parseFeatureInfo(result, url);\n          callback.call(this, latlng, text);\n      }\n  },\n\n  'ajax': function(url, callback) {\n      ajax.call(this, url, callback);\n  },\n\n  'getIdentifyLayers': function() {\n      // Hook to determine which layers to identify\n      if (this.options.identifyLayers)\n          return this.options.identifyLayers;\n      return Object.keys(this._subLayers);\n   },\n\n  'getFeatureInfoParams': function(point, layers) {\n      // Hook to generate parameters for WMS service GetFeatureInfo request\n      var wmsParams, overlay;\n      if (this.options.untiled) {\n          // Use existing overlay\n          wmsParams = this._overlay.wmsParams;\n      } else {\n          // Create overlay instance to leverage updateWmsParams\n          overlay = this.createOverlay(true);\n          overlay.updateWmsParams(this._map);\n          wmsParams = overlay.wmsParams;\n          wmsParams.layers = layers.join(',');\n      }\n      var infoParams = {\n          'request': 'GetFeatureInfo',\n          'query_layers': layers.join(','),\n          'X': Math.round(point.x),\n          'Y': Math.round(point.y)\n      };\n      return L.extend({}, wmsParams, infoParams);\n  },\n\n  'parseFeatureInfo': function(result, url) {\n      // Hook to handle parsing AJAX response\n      if (result == \"error\") {\n          // AJAX failed, possibly due to CORS issues.\n          // Try loading content in <iframe>.\n          result = \"<iframe src='\" + url + \"' style='border:none'>\";\n      }\n      return result;\n  },\n\n  'showFeatureInfo': function(latlng, info) {\n      // Hook to handle displaying parsed AJAX response to the user\n      if (!this._map) {\n          return;\n      }\n      this._map.openPopup(info, latlng);\n  },\n\n  'showWaiting': function() {\n      // Hook to customize AJAX wait animation\n      if (!this._map)\n          return;\n      this._map._container.style.cursor = \"progress\";\n  },\n\n  'hideWaiting': function() {\n      // Hook to remove AJAX wait animation\n      if (!this._map)\n          return;\n      this._map._container.style.cursor = \"default\";\n  }\n});\n\nwms.source = function(url, options) {\n  return new wms.Source(url, options);\n};\n\n/*\n* Layer\n* Leaflet \"layer\" with all actual rendering handled via an underlying Source\n* object.  Can be called directly with a URL to automatically create or reuse\n* an existing Source.  Note that the auto-source feature doesn't work well in\n* multi-map environments; so for best results, create a Source first and use\n* getLayer() to retrieve wms.Layer instances.\n*/\n\nwms.Layer = L.Layer.extend({\n  'initialize': function(source, layerName, options) {\n      L.setOptions(this, options);\n      if (!source.addSubLayer) {\n          // Assume source is a URL\n          source = wms.getSourceForUrl(source, options);\n      }\n      this._source = source;\n      this._name = layerName;\n  },\n  'onAdd': function() {\n      if (!this._source._map)\n          this._source.addTo(this._map);\n      this._source.addSubLayer(this._name);\n  },\n  'onRemove': function() {\n      this._source.removeSubLayer(this._name);\n  },\n  'setOpacity': function(opacity) {\n      this._source.setOpacity(opacity);\n  },\n  'bringToBack': function() {\n      this._source.bringToBack();\n  },\n  'bringToFront': function() {\n      this._source.bringToFront();\n  }\n});\n\nwms.layer = function(source, options) {\n  return new wms.Layer(source, options);\n};\n\n// Cache of sources for use with wms.Layer auto-source option\nvar sources = {};\nwms.getSourceForUrl = function(url, options) {\n  if (!sources[url]) {\n      sources[url] = wms.source(url, options);\n  }\n  return sources[url];\n};\n\n\n// Copy tiled WMS layer from leaflet core, in case we need to subclass it later\nwms.TileLayer = L.TileLayer.WMS;\nwms.tileLayer = L.tileLayer.wms;\n\n/*\n* wms.Overlay:\n* \"Single Tile\" WMS image overlay that updates with map changes.\n* Portions of wms.Overlay are directly extracted from L.TileLayer.WMS.\n* See Leaflet license.\n*/\nwms.Overlay = L.Layer.extend({\n  'defaultWmsParams': {\n      'service': 'WMS',\n      'request': 'GetMap',\n      'version': '1.1.1',\n      'layers': '',\n      'styles': '',\n      'format': 'image/jpeg',\n      'transparent': false\n  },\n\n  'options': {\n      'crs': null,\n      'uppercase': false,\n      'attribution': '',\n      'opacity': 1,\n      'isBack': false,\n      'minZoom': 0,\n      'maxZoom': 18\n  },\n\n  'initialize': function(url, options) {\n      this._url = url;\n\n      // Move WMS parameters to params object\n      var params = {}, opts = {};\n      for (var opt in options) {\n           if (opt in this.options) {\n               opts[opt] = options[opt];\n           } else {\n               params[opt] = options[opt];\n           }\n      }\n      L.setOptions(this, opts);\n      this.wmsParams = L.extend({}, this.defaultWmsParams, params);\n  },\n\n  'setParams': function(params) {\n      L.extend(this.wmsParams, params);\n      this.update();\n  },\n\n  'getAttribution': function() {\n      return this.options.attribution;\n  },\n\n  'onAdd': function() {\n      this.update();\n  },\n\n  'onRemove': function(map) {\n      if (this._currentOverlay) {\n          map.removeLayer(this._currentOverlay);\n          delete this._currentOverlay;\n      }\n      if (this._currentUrl) {\n          delete this._currentUrl;\n      }\n  },\n\n  'getEvents': function() {\n      return {\n          'moveend': this.update\n      };\n  },\n\n  'update': function() {\n      if (!this._map) {\n          return;\n      }\n      // Determine image URL and whether it has changed since last update\n      this.updateWmsParams();\n      var url = this.getImageUrl();\n      if (this._currentUrl == url) {\n          return;\n      }\n      this._currentUrl = url;\n\n      // Keep current image overlay in place until new one loads\n      // (inspired by esri.leaflet)\n      var bounds = this._map.getBounds();\n      var overlay = L.imageOverlay(url, bounds, {'opacity': 0});\n      overlay.addTo(this._map);\n      overlay.once('load', _swap, this);\n      function _swap() {\n          if (!this._map) {\n              return;\n          }\n          if (overlay._url != this._currentUrl) {\n              this._map.removeLayer(overlay);\n              return;\n          } else if (this._currentOverlay) {\n              this._map.removeLayer(this._currentOverlay);\n          }\n          this._currentOverlay = overlay;\n          overlay.setOpacity(\n              this.options.opacity ? this.options.opacity : 1\n          );\n          if (this.options.isBack === true) {\n              overlay.bringToBack();\n          }\n          if (this.options.isBack === false) {\n              overlay.bringToFront();\n          }\n          if (this.options.zIndex !== undefined) {\n            overlay.setZIndex(this.options.zIndex);\n        }\n      }\n      if ((this._map.getZoom() < this.options.minZoom) ||\n          (this._map.getZoom() > this.options.maxZoom)){\n          this._map.removeLayer(overlay);\n      }\n  },\n\n  'setOpacity': function(opacity) {\n       this.options.opacity = opacity;\n       if (this._currentOverlay) {\n           this._currentOverlay.setOpacity(opacity);\n       }\n  },\n\n  'bringToBack': function() {\n      this.options.isBack = true;\n      if (this._currentOverlay) {\n          this._currentOverlay.bringToBack();\n      }\n  },\n\n  'bringToFront': function() {\n      this.options.isBack = false;\n      if (this._currentOverlay) {\n          this._currentOverlay.bringToFront();\n      }\n  },\n\n  'setZIndex': function(zIndex) {\n    this.options.zIndex = zIndex;\n      if (this._currentOverlay) {\n          this._currentOverlay.setZIndex(zIndex);\n      }\n  },\n\n  // See L.TileLayer.WMS: onAdd() & getTileUrl()\n  'updateWmsParams': function(map) {\n      if (!map) {\n          map = this._map;\n      }\n      // Compute WMS options\n      var bounds = map.getBounds();\n      var size = map.getSize();\n      var wmsVersion = parseFloat(this.wmsParams.version);\n      var crs = this.options.crs || map.options.crs;\n      var projectionKey = wmsVersion >= 1.3 ? 'crs' : 'srs';\n      var nw = crs.project(bounds.getNorthWest());\n      var se = crs.project(bounds.getSouthEast());\n\n      // Assemble WMS parameter string\n      var params = {\n          'width': size.x,\n          'height': size.y\n      };\n      params[projectionKey] = crs.code;\n      params.bbox = (\n          wmsVersion >= 1.3 && crs === L.CRS.EPSG4326 ?\n          [se.y, nw.x, nw.y, se.x] :\n          [nw.x, se.y, se.x, nw.y]\n      ).join(',');\n\n      L.extend(this.wmsParams, params);\n  },\n\n  'getImageUrl': function() {\n      var uppercase = this.options.uppercase || false;\n      var pstr = L.Util.getParamString(this.wmsParams, this._url, uppercase);\n      return this._url + pstr;\n  }\n});\n\nwms.overlay = function(url, options) {\n  return new wms.Overlay(url, options);\n};\n\n// Simple AJAX helper (since we can't assume jQuery etc. are present)\nfunction ajax(url, callback) {\n  var context = this,\n      request = new XMLHttpRequest();\n  request.onreadystatechange = change;\n  request.open('GET', url);\n  request.send();\n\n  function change() {\n      if (request.readyState === 4) {\n          if (request.status === 200) {\n              callback.call(context, request.responseText);\n          } else {\n              callback.call(context, \"error\");\n          }\n      }\n  }\n}\n\nreturn wms;\n\n}));\n","import { LayerAdapter } from '@nextgis/webmap';\r\nimport {Map, Layer} from 'leaflet';\r\n\r\nlet ID = 1;\r\n\r\nexport abstract class BaseAdapter implements LayerAdapter {\r\n\r\n  map: Map;\r\n  name: string;\r\n  options;\r\n\r\n  constructor(map, options?) {\r\n    this.map = map;\r\n    this.name = options.id || String(ID++);\r\n    this.options = Object.assign({}, this.options, options);\r\n  }\r\n\r\n  addLayer(options?): Layer {\r\n    return null;\r\n  }\r\n}\r\n","import { LayerAdapter } from '@nextgis/webmap';\r\nimport { TileLayer } from 'leaflet';\r\nimport { BaseAdapter } from './BaseAdapter';\r\n\r\nlet ID = 1;\r\n\r\nexport class TileAdapter extends BaseAdapter implements LayerAdapter {\r\n\r\n  name: string;\r\n\r\n  addLayer(options?) {\r\n\r\n    this.name = options.id || 'tile-' + ID++;\r\n    const {url, ...opt} = options;\r\n    const layer = new TileLayer(url, opt);\r\n\r\n    // layer.addTo(this.map);\r\n\r\n    return layer;\r\n  }\r\n}\r\n","import { LayerAdapter } from '@nextgis/webmap';\r\nimport { GeoJSON } from 'leaflet';\r\nimport { BaseAdapter } from './BaseAdapter';\r\n\r\nlet ID = 1;\r\n\r\nexport class GeoJsonAdapter extends BaseAdapter implements LayerAdapter {\r\n\r\n  name: string;\r\n\r\n  addLayer(options?) {\r\n\r\n    this.name = options.id || 'geojson-' + ID++;\r\n\r\n    const layer = new GeoJSON(options.data, options);\r\n\r\n    // layer.addTo(this.map);\r\n\r\n    return layer;\r\n  }\r\n}\r\n","import { Control } from 'leaflet';\r\n// import { AttributionControlOptions } from '@nextgis/webmap';\r\n\r\nexport class AttributionControl extends Control.Attribution {\r\n\r\n  // options: AttributionControlOptions\r\n  constructor(options) {\r\n    super(options);\r\n    if (options.customAttribution) {\r\n      const attributions = [].concat(options.customAttribution);\r\n      attributions.forEach((x) => this.addAttribution(x));\r\n    }\r\n  }\r\n\r\n}\r\n","import { LayerAdapter } from '@nextgis/webmap';\n// import wms from 'leaflet.wms/src/leaflet.wms.js';\nimport wms from './wms';\n\nlet ID = 1;\n\nexport class ImageAdapter implements LayerAdapter {\n\n  name: string;\n  layer: any;\n\n  addLayer(options?) {\n    options = { transparent: true, ...options };\n    const updateWmsParamsFromOpt = options.updateWmsParams;\n    this.name = options.id || 'image-' + ID++;\n    this.layer = wms.overlay(options.url, options);\n    if (updateWmsParamsFromOpt) {\n      const updateWmsParams = this.layer.updateWmsParams;\n      this.layer.updateWmsParams = function (map) {\n        updateWmsParams.call(this, map);\n        this.wmsParams = updateWmsParamsFromOpt(this.wmsParams);\n      };\n    }\n    return this.layer;\n  }\n}\n","import { MapAdapter, MapOptions } from '@nextgis/webmap';\r\nimport { Map, Control } from 'leaflet';\r\nimport { EventEmitter } from 'events';\r\nimport { TileAdapter } from './layer-adapters/TileAdapter';\r\nimport { GeoJsonAdapter } from './layer-adapters/GeoJsonAdapter';\r\nimport { AttributionControl } from './controls/Attribution';\r\nimport { ImageAdapter } from './layer-adapters/ImageAdapter';\r\n// import { ImageAdapter } from './layer-adapters/ImageAdapter';\r\n// import { OsmAdapter } from './layer-adapters/OsmAdapter';\r\n// import { MarkerAdapter } from './layer-adapters/MarkerAdapter';\r\n\r\ninterface LayerMem {\r\n  layer: any;\r\n  onMap: boolean;\r\n  order?: number;\r\n  baseLayer?: boolean;\r\n}\r\n\r\nexport interface LeafletMapAdapterOptions extends MapOptions {\r\n  id?: string;\r\n}\r\n\r\nexport default class LeafletMapAdapter implements MapAdapter {\r\n\r\n  static layerAdapters = {\r\n    IMAGE: ImageAdapter,\r\n    TILE: TileAdapter,\r\n    GEOJSON: GeoJsonAdapter,\r\n    // // MVT: MvtAdapter,\r\n    // OSM: OsmAdapter,\r\n    // MARKER: MarkerAdapter,\r\n  };\r\n\r\n  static controlAdapters = {\r\n    ZOOM: Control.Zoom,\r\n    ATTRIBUTION: AttributionControl,\r\n  };\r\n\r\n  options: LeafletMapAdapterOptions = { target: 'map' };\r\n\r\n  layerAdapters = LeafletMapAdapter.layerAdapters;\r\n\r\n  displayProjection = 'EPSG:3857';\r\n  lonlatProjection = 'EPSG:4326';\r\n  emitter = new EventEmitter();\r\n\r\n  map: Map;\r\n\r\n  _layers: { [x: string]: LayerMem } = {};\r\n\r\n  private DPI = 1000 / 39.37 / 0.28;\r\n  private IPM = 39.37;\r\n  private _order = 0;\r\n  private _length = 9999; // TODO: get real layers length count, after all registered\r\n  private _baseLayers: string[] = [];\r\n\r\n  // create(options: MapOptions = {target: 'map'}) {\r\n  create(options: LeafletMapAdapterOptions = { target: 'map' }) {\r\n    this.options = Object.assign({}, options);\r\n\r\n    this.map = new Map(this.options.target, { zoomControl: false, attributionControl: false });\r\n    this.emitter.emit('create', { map: this.map });\r\n\r\n    this._addMapListeners();\r\n  }\r\n\r\n  getContainer(): HTMLElement {\r\n    return this.map.getContainer();\r\n  }\r\n\r\n  onMapLoad(cb?: any) {\r\n    return new Promise((resolve) => {\r\n      resolve(cb && cb());\r\n    });\r\n  }\r\n\r\n  setCenter(latLng: [number, number]) {\r\n    this.map.setView(latLng, this.map.getZoom());\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    this.map.setZoom(zoom);\r\n  }\r\n\r\n  // [extent_left, extent_bottom, extent_right, extent_top];\r\n  fit(e: [number, number, number, number]) {\r\n    // top, left, bottom, right\r\n    this.map.fitBounds([[e[3], e[0]], [e[1], e[2]]]);\r\n  }\r\n\r\n  getLayerAdapter(name: string) {\r\n    return LeafletMapAdapter.layerAdapters[name];\r\n  }\r\n\r\n  getLayer(layerName: string) {\r\n    return this._layers[layerName] !== undefined;\r\n  }\r\n\r\n  getLayers(): string[] {\r\n    return Object.keys(this._layers);\r\n  }\r\n\r\n  isLayerOnTheMap(layerName: string): boolean {\r\n    const layerMem = this._layers[layerName];\r\n    return layerMem.onMap;\r\n  }\r\n\r\n  addControl(controlDef, position, options) {\r\n    let control;\r\n    if (typeof controlDef === 'string') {\r\n      const engine = LeafletMapAdapter.controlAdapters[controlDef];\r\n      if (engine) {\r\n        control = new engine(options);\r\n      }\r\n    } else {\r\n      control = controlDef;\r\n    }\r\n    if (control) {\r\n      control.options.position = position.replace('-', '');\r\n      this.map.addControl(control);\r\n      return control;\r\n    }\r\n  }\r\n\r\n  addLayer(adapterDef, options?, baselayer?: boolean) {\r\n\r\n    let adapterEngine;\r\n    if (typeof adapterDef === 'string') {\r\n      adapterEngine = this.getLayerAdapter(adapterDef);\r\n    } else {\r\n      adapterEngine = adapterDef;\r\n    }\r\n    if (adapterEngine) {\r\n      const adapter = new adapterEngine(this.map, options);\r\n      const layer = adapter.addLayer(options);\r\n\r\n      const addlayerFun = adapter.addLayer(options);\r\n      const toResolve = (l) => {\r\n        const layerId = adapter.name;\r\n        const layerOpts: LayerMem = { layer: l, onMap: false };\r\n        if (baselayer) {\r\n          layerOpts.baseLayer = true;\r\n          this._baseLayers.push(layerId);\r\n        } else {\r\n          layerOpts.order = options.order || this._order++;\r\n        }\r\n        this._layers[layerId] = layerOpts;\r\n        // this._length++;\r\n\r\n        return adapter;\r\n      };\r\n      return addlayerFun.then ? addlayerFun.then((l) => toResolve(l)) : Promise.resolve(toResolve(layer));\r\n    }\r\n    return Promise.reject('No adapter');\r\n  }\r\n\r\n  removeLayer(layerName: string) {\r\n    // ignore\r\n  }\r\n\r\n  showLayer(layerName: string) {\r\n    this.toggleLayer(layerName, true);\r\n  }\r\n\r\n  hideLayer(layerName: string) {\r\n    this.toggleLayer(layerName, false);\r\n  }\r\n\r\n  setLayerOpacity(layerName: string, value: number) {\r\n    // ignore\r\n  }\r\n\r\n  getScaleForResolution(res, mpu) {\r\n    return parseFloat(res) * (mpu * this.IPM * this.DPI);\r\n  }\r\n\r\n  getResolutionForScale(scale, mpu) {\r\n    return parseFloat(scale) / (mpu * this.IPM * this.DPI);\r\n  }\r\n\r\n  toggleLayer(layerName: string, status: boolean) {\r\n    const action = (source: Map, l: LayerMem) => {\r\n      if (status) {\r\n        if (source instanceof Map) {\r\n          l.layer.addTo(source);\r\n          // TODO: set order for any layer\r\n          if (l.layer.setZIndex) {\r\n            const order = l.baseLayer ? 0 : this._length - l.order;\r\n            l.layer.setZIndex(order);\r\n          }\r\n        }\r\n      } else {\r\n        source.removeLayer(l.layer);\r\n      }\r\n      l.onMap = status;\r\n    };\r\n    const layer = this._layers[layerName];\r\n    if (layer && layer.onMap !== status) {\r\n      if (this.map) {\r\n        action(this.map, layer);\r\n      } else {\r\n        this.emitter.once('create', (data) => {\r\n          action(data.map, layer);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onMapClick(evt) {\r\n    const coord = evt.containerPoint;\r\n    const latLng = evt.latlng;\r\n    this.emitter.emit('click', {\r\n      latLng,\r\n      pixel: { left: coord.x, top: coord.y },\r\n      source: evt,\r\n    });\r\n  }\r\n\r\n  private _addMapListeners() {\r\n    this.map.on('click', (evt) => {\r\n      this.onMapClick(evt);\r\n    });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}